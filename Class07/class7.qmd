---
title: "class7"
author: "Solomon Kim "
format: pdf
---

Today we will start out multi-part exploration of some key machine learning methods. We will begin with clustering -finding groupings in data, and then dimensionallity reduction. 

## Clustering 

Let's start with "K-means" clustering. 
The main function in base R for this `k-means()`

```{r}
# make up some data

hist( rnorm(100000, mean=3) )




```

```{r}
rnorm(30, -3)
rnorm(30, +3)

```


```{r}
tmp <- c(rnorm(30, -3), rnorm(30, +3) )
tmp

x <- cbind(x=tmp, y=rev(tmp))

plot(x)
```

Now lets try out `kmeans()`

```{r}

km <- kmeans(x, centers=2)
km
```
```{r}
attributes(km)

```
> Q. How many points in each cluster

```{r}
km$size
```

> Q. What components of your result object details cluster assignment/membership?

```{r}
km$cluster
```


> Q. What are centers/mean calues of each cluster?

```{r}
km$centers
```


> Q. Make a plot of your data showing your clustering results (groupings/clusters and cluster cneters).

```{r}
plot(x, col=c("red", "blue"))
```
```{r}
plot(x, col=2)
```

```{r}
plot(x, col=c(1,2))

```

```{r}
plot(x, col=km$cluster)
points(km$centers, col="green", pch=15, cex=3)

```

> Q. Run `kmeans()` again and cluster in 4 groups and plot the results. 

```{r}
km4 <- kmeans(x, centers=4)

plot(x, col=km4$cluster)

```



###Hierarchical Clustering

This form of clustering aims to reveal the structure in your data bt progressively grouping points into aever smaller number of clusters 

THe main function in base R for this called `hclust()`. This function does not take our input data directly but wnats a "distance matrix" that details how (dis)similar all our input points are to each other. 

```{r}
hc <- hclust( dist(x) )
hc
```


The print out above is not very useful (unlick that from kmeans) but there is a useful `plot()` methods. 

```{r}
plot(hc)
abline(h=10, col="red")

```

To get my main result (my cluster membership vector) I need to "cut" my tree using the function `cutree()`

```{r}
grps <- cutree(hc, h=10)
grps

plot(x, col=grps)

```

# principal component analysis (PCA)

The goal of PCA is to reduce the dimensionality of a dataset down to some smaller subset of new variables (called PCs) that are a useful bases for further analysis, like visualization, clustering, etc. 

>Q1. How many rows and columns are in your new data frame named x? What R functions could you use to answer this questions?



```{r}
url <- "https://tinyurl.com/UK-foods"
x <- read.csv(url)
x
ncol(x)
nrow(x)
```


```{r}
rownames(x) <- x[,1]
x <- x[,-1]
head(x)
```
```{r}
dim(x)

x <- read.csv(url, row.names=1)
head(x)
```


```{r}
barplot(as.matrix(x), col=rainbow(nrow(x)))
```
```{r}

```

The so called "pairs" plot can be useful for small datasets.

```{r}

pairs(x, col=rainbow(nrow(x)), pch=16)
```

so the paris plot is useful for small datasets but it can be lots of work to interpret and gets intractable for larger datasets. 

So PCA to the rescue.... 

The main function to do PCA in base R is called `prcomp()`. This function wants the trasnpose of our data in this case. 

```{r}
#t(x)
pca <- prcomp(t(x))
summary(pca)
```
```{r}
attributes(pca)
```

```{r}
pca$x
```

A major PCA result viz is called a "PCA plot" (a.k.a:  a score plot, biplot, PC1 vs PC2 plot, ordienation plot)

```{r}
mycols <- c("orange", "red", "blue", "darkgreen")
plot(pca$x[,1], pca$x[,2], col=mycols, pch=16, xlab= "PC2", ylab="PC2")

abline(h=0, col="gray")
abline(v=0, col="gray")

```

Another important output from PCA is called the "loadings" vector or the "rotation component - this tells us how much the original variable (the food in this case) contributes to the new Pcs. 

```{r}
pca$rotation
```


PCA looks to be a super useful method for gaining some insight into high dimensional data that is difficult to examine in other ways. 



## PCA of RNASeq data 
 
## Data input
```{r}
url2 <- "https://tinyurl.com/expression-CSV"
rna.data <- read.csv(url2, row.names=1)
head(rna.data)
```

```{r}
pca <- prcomp(t(rna.data), scale=TRUE)
```


```{r}
summary(pca)
```

> How many genes in this dataset

```{r}
nrow(rna.data)
```
```{r}
attributes(pca)
```

```{r}
head(pca$x)

kmeans(pca$x[,1], centers =2)
```


I will make a main result figure use ggplot: 

```{r}
library(ggplot2)
```


```{r}
res <- as.data.frame(pca$x)
```


```{r}
mycols <- c(rep("blue", 5), rep("red", 5))
mycols

```
```{r}
ggplot(res) + aes(x=PC1,y=PC2) + geom_point(col=mycols) + geom(poin)

```


```{r}
colnames(rna.data)
```



