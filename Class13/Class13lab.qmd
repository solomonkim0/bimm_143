---
title: "Class 13: Transcriptomics and the analysis of RNA-Seq data"
author: "Solomon Kim"
format: pdf
---

The data for this hands-on session comes from a published RNA-seq experiment where airway smooth muscle cells were treated with dexamethasone, a synthetic glucocorticoid steroid with anti-inflammatory effects (Himes et al. 2014).

## Import Data

We need two things for this analysis: counts and metadata these are called "countData" and "colData" in the DESeq2 world.

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")

head(counts)

```

The counts are organized with a gene per row and experiment per column

```{r}
head(metadata)
```

## Examine Data

> Q1. How many genes are in this dataset?

```{r}
nrow(counts)
```

> Q2. How many ‘control’ cell lines do we have?

```{r}
sum(metadata$dex == "control")
table(metadata$dex)
```

## Check on match of metadata and coldata

```{r}
colnames(counts)
```

```{r}
metadata$id
```

```{r}
colnames(counts) == metadata$id
```

If you want to know that all the elements of a vector are TRUE we ca use the `all()` function.

```{r}
all(c(T,T,T))
all(c(T,T,F))
```

```{r}
all(colnames(counts) == metadata$id)
```

## Analysis

I want to start by comparing "control" and "treated" columns, to this I will first find the average for each gene (row) in all "control" columns. Then I will find the average in the reated columns. Then I will compare them.

Let's extract all "control" columns control.

```{r}
control.inds <- metadata$dex == "control"

```

```{r}
control.counts <- counts[,control.inds]
```

Now find the mean count value per fene using the `apply()` function.

```{r}
control.mean <- apply(control.counts, 1, mean)
```

Now do the same for the "treated" columns. i..e. find `treated.mean` values.

```{r}
treated.inds <- metadata$dex == "treated"
```

```{r}
treated.counts <- counts[,treated.inds]
```

```{r}
treated.mean <- apply(treated.counts, 1, mean)
```

Put these two mean vectors together for ease of book-keeping

```{r}
meancounts <- data.frame(control.mean, treated.mean)
head(meancounts)
```

Let's have a wee look with a quick plot

```{r}
plot(meancounts, )
```

```{r}
plot(meancounts,log="xy")
```

```{r}
log(10, base=2)
```

```{r}
log2(10/10)
```

```{r}
log2(20/10)
log2(10/20)
```

We most often work in log2 units because they have a more simple interpretation.

Here we calculate the log2 Fold-change of treated/control values and add it to our new data frame of results

```{r}
meancounts$log2fc <- log2(meancounts$treated.mean/meancounts$control.mean)
head(meancounts)
```

There are some funky answers in here like NaN (not a number and -inf (minus infinity)) that all come ecause I have zero count genes in my data set.

It is common practice to filter these zero count genes out before we go too deep

```{r}
#apply(meancounts[,1:2] == 0, 1, sum)
to.keep.inds <- (rowSums(meancounts[,1:2] == 0) == 0)

mycounts <- meancounts[to.keep.inds, ]
head(mycounts)
```

> Q. How many genes do we have left after zero count filtering?

```{r}
nrow(mycounts)
```

A common threshold for calling a gene "up" or "down" is a log2 fold change of +2 or -2.

> Q. How many "up" regulated gene do we have?

```{r}
sum(mycounts$log2fc >= +2)
```

## DESeq Analysis

We need to do this analyss properly with our inner stats person kept happy

```{r}
#| message: false
library(DESeq2)
```

To use DESeq we need to get our input data in very particular format.

```{r}
dds <- DESeqDataSetFromMatrix(countData = counts, colData = metadata, design = ~dex)
```

Run DESeq analysis

```{r}
dds <- DESeq(dds)
```

Get the resutlts

```{r}
res <- results(dds)
head(res)
```

I want to make a figure showing an overview of all my results to date A plot of **log2 fold change** vs the adjusted **p-value** (adjusted p-value)

```{r}
plot(res$log2FoldChange, -log(res$padj))
abline(v=-2, col="gray")
abline(v=+2, col="gray")
abline(h=-log(0.05), col="gray")
```


######################## 

## Add annotation data

We want to add on gene symbols (i.e. gene names) as well as other common identifiers from major databases for all our genes of interest.

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```

```{r}
columns(org.Hs.eg.db)
```

We can translate between the following

```{r}
res$symbol <- mapIds(org.Hs.eg.db, keys=row.names(res), keytype="ENSEMBL", column="SYMBOL", multiVals="first")

head(res)
```

My IDs are in the `rownames(res)` and they are in ENSEMBL

```{r}
#rownames(res)
```

We also want "GENENAME" and "ENTREZID"

```{r}
res$genename <- mapIds(org.Hs.eg.db, keys=row.names(res), keytype="ENSEMBL", column="GENENAME", multiVals="first")
head(res)
```

```{r}
res$entrezid <- mapIds(org.Hs.eg.db, keys=row.names(res), keytype="ENSEMBL", column="ENTREZID", multiVals="first")
head(res)

```

Let's save our results to a new CSV file

```{r}
write.csv(res, file="myresults.csv")

```

## Pathway Analysis

Here we will use the "gage" package to do some pathway analysis (a.k.a geneset

```{r}
#| message: false 

library(pathview)
library(gage)
library(gageData)



```

Have a peak at KEG data

```{r}

data(kegg.sets.hs)

#first two pathways in this kegg set for humans
data(kegg.sets.hs, 2)
```

To run gage we need to provide it with a vector of fold-change values (not our big full results table)

```{r}
foldchanges <- res$log2FoldChange
#foldchanges
```

Add the ENTREZ ids as names to this vector

```{r}
x <- c(10, 9, 7)
names(x) <- c("chandra", "alice", "Barry")
x

```

Add Entrez ids as names to my foldchange vector

```{r}
names(foldchanges) <- res$entrezid
head(foldchanges)
```

```{r}
keggres = gage(foldchanges, gsets=kegg.sets.hs)
attributes(keggres)
```

```{r}
head(keggres$less)
```

Let's have a look at the hsa05310 Asthma pathway with our gene highlighted using the `pathview()` function:

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa04110")

```

![](hsa04110.pathview.png)
